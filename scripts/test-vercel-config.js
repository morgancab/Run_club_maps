#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la configuration Vercel
 * Usage: node scripts/test-vercel-config.js
 */

console.log('üîç Test de configuration Vercel pour Google Sheets API\n');

// Test 1: V√©rification des variables d'environnement
console.log('1Ô∏è‚É£ V√©rification des variables d\'environnement...');

const hasGoogleKey = !!process.env.GOOGLE_SERVICE_ACCOUNT_KEY;
console.log(`   GOOGLE_SERVICE_ACCOUNT_KEY: ${hasGoogleKey ? '‚úÖ D√©finie' : '‚ùå Manquante'}`);

if (hasGoogleKey) {
  try {
    const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY);
    
    // V√©rifications de base
    const requiredFields = ['type', 'project_id', 'private_key', 'client_email'];
    const missingFields = requiredFields.filter(field => !credentials[field]);
    
    if (missingFields.length === 0) {
      console.log('   ‚úÖ Format JSON valide avec tous les champs requis');
      
      // Test de la cl√© priv√©e
      if (credentials.private_key.includes('\\n')) {
        console.log('   ‚ö†Ô∏è  Cl√© priv√©e contient des \\n (sera corrig√© automatiquement)');
      } else if (credentials.private_key.includes('\n')) {
        console.log('   ‚úÖ Cl√© priv√©e correctement format√©e');
      } else {
        console.log('   ‚ùå Cl√© priv√©e semble mal format√©e');
      }
      
      console.log(`   üìß Email du compte de service: ${credentials.client_email}`);
      console.log(`   üÜî Project ID: ${credentials.project_id}`);
      
    } else {
      console.log(`   ‚ùå Champs manquants: ${missingFields.join(', ')}`);
    }
    
  } catch (error) {
    console.log('   ‚ùå Erreur de parsing JSON:', error.message);
  }
} else {
  console.log('   üí° Pour configurer: Vercel Dashboard > Settings > Environment Variables');
  console.log('   üí° Nom: GOOGLE_SERVICE_ACCOUNT_KEY');
  console.log('   üí° Valeur: Contenu complet du fichier JSON de service account');
}

console.log('\n2Ô∏è‚É£ Informations d\'environnement...');
console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'non d√©fini'}`);
console.log(`   VERCEL_ENV: ${process.env.VERCEL_ENV || 'non d√©fini'}`);
console.log(`   VERCEL_URL: ${process.env.VERCEL_URL || 'non d√©fini'}`);

// Test 3: Test de connexion Google Sheets (si possible)
console.log('\n3Ô∏è‚É£ Test de connexion Google Sheets...');

if (hasGoogleKey) {
  console.log('   üîÑ Tentative de connexion...');
  
  // Import dynamique pour √©viter les erreurs si les modules ne sont pas disponibles
  import('../lib/fetchSheet.js')
    .then(({ fetchRunClubs }) => {
      return fetchRunClubs();
    })
    .then((clubs) => {
      console.log(`   ‚úÖ Connexion r√©ussie! ${clubs.length} clubs r√©cup√©r√©s`);
      
      if (clubs.length > 0) {
        console.log(`   üìç Premier club: ${clubs[0].properties.name} (${clubs[0].properties.city})`);
      }
    })
    .catch((error) => {
      console.log('   ‚ùå Erreur de connexion:', error.message);
      
      if (error.message.includes('Unable to parse range')) {
        console.log('   üí° V√©rifiez que la Google Sheet est partag√©e avec le compte de service');
      } else if (error.message.includes('Authentication')) {
        console.log('   üí° Probl√®me d\'authentification - v√©rifiez la variable GOOGLE_SERVICE_ACCOUNT_KEY');
      }
    });
} else {
  console.log('   ‚è≠Ô∏è  Ignor√© (variable d\'environnement manquante)');
}

console.log('\nüìã Checklist de d√©ploiement Vercel:');
console.log('   ‚ñ° Variable GOOGLE_SERVICE_ACCOUNT_KEY configur√©e');
console.log('   ‚ñ° Google Sheet partag√©e avec le compte de service');
console.log('   ‚ñ° Permissions "Lecteur" accord√©es au compte de service');
console.log('   ‚ñ° API Google Sheets activ√©e dans Google Cloud Console');
console.log('   ‚ñ° Red√©ploiement effectu√© apr√®s configuration des variables');

console.log('\nüîó Liens utiles:');
console.log('   ‚Ä¢ Vercel Dashboard: https://vercel.com/dashboard');
console.log('   ‚Ä¢ Google Cloud Console: https://console.cloud.google.com/');
console.log('   ‚Ä¢ Documentation: voir DEPLOYMENT.md');

console.log('\n‚ú® Test termin√©!\n'); 